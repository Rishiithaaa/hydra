{"accordion/accordion.js":[{"code":"({button, dd, num, id}) => {button.addEventListener('click', e => {\n  handleClick(e.target, dd, num, id);\n});}","id":0},{"code":"({expandBtn}) => {expandBtn.addEventListener('click', ({\n  currentTarget\n}) => toggleAll(currentTarget, 'expand'));}","id":1},{"code":"({collapseBtn}) => {collapseBtn.addEventListener('click', ({\n  currentTarget\n}) => toggleAll(currentTarget, 'collapse'));}","id":2},{"code":"({i, counter}) => {console.log(i, counter);}","id":4}],"global-navigation/global-navigation.js":[{"code":"() => {localNav.querySelector('.feds-localnav-title').addEventListener('click', () => {\n  localNav.classList.toggle('feds-localnav--active');\n  const isActive = localNav.classList.contains('feds-localnav--active');\n  localNav.querySelector('.feds-localnav-title').setAttribute('aria-expanded', isActive);\n  localNav.querySelector('.feds-localnav-title').setAttribute('daa-ll', `${title}_localNav|${isActive ? 'close' : 'open'}`);\n});}","id":4},{"code":"({}) => {toggle.addEventListener('click', () => logErrorFor(async () => {\n  this.toggleMenuMobile();\n  if (this.blocks?.search?.instance) {\n    this.blocks.search.instance.clearSearchForm();\n  } else {\n    await this.loadSearch();\n  }\n  if (this.isToggleExpanded()) setHamburgerPadding();\n}, 'Toggle click failed', 'gnav', 'error'));}","id":2},{"code":"({isDesktop, popup}) => {isDesktop.addEventListener('change', async () => {\n  enableMobileScroll();\n  if (isDesktop.matches) {\n    popup.innerHTML = originalContent;\n    this.block.classList.remove('new-nav');\n  } else {\n    originalContent = await transformTemplateToMobile(popup, item, this.isLocalNav());\n    popup.querySelector('.close-icon')?.addEventListener('click', this.toggleMenuMobile);\n    this.block.classList.add('new-nav');\n  }\n});}","id":1},{"code":"({isDesktop, dropdownTrigger, isSectionMenu }) => {dropdownTrigger.addEventListener('click', e => {\n  if (!isDesktop.matches && this.newMobileNav && isSectionMenu) {\n    const popup = dropdownTrigger.nextElementSibling;\n    if (popup && this.isLocalNav()) {\n      this.updatePopupPosition(popup);\n    }\n    makeTabActive(popup);\n  } else if (isDesktop.matches && this.newMobileNav && isSectionMenu) {\n    const popup = dropdownTrigger.nextElementSibling;\n    if (popup) popup.style.removeProperty('top');\n  }\n  trigger({\n    element: dropdownTrigger,\n    event: e,\n    type: 'dropdown'\n  });\n  setActiveDropdown(dropdownTrigger);\n});}","id":0}],"modal/modal.js":[{"code":"({}) => {window.addEventListener('hashchange', e => {\n  if (!window.location.hash) {\n    try {\n      const url = new URL(e.oldURL);\n      const dialog = document.querySelector(`.dialog-modal${url.hash}`);\n      if (dialog) closeModal(dialog);\n    } catch (error) {}\n  } else {\n    const details = findDetails(window.location.hash, null);\n    if (details) getModal(details);\n    if (e.oldURL?.includes('#')) {\n      prevHash = new URL(e.oldURL).hash;\n    }\n  }\n});}","id":2}],"section-metadata/section-metadata.js":[{"code":"({x, section}) => {handleDelay(x, section);}","id":0}],"tabs/tabs.js":[{"code":"({tabs, tabLists, tabFocus}) => {tabLists.forEach(tabList => {\n  tabList.addEventListener('keydown', e => {\n    if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n      if (e.key === 'ArrowRight') {\n        tabFocus += 1;\n        if (tabFocus >= tabs.length) tabFocus = 0;\n      } else if (e.key === 'ArrowLeft') {\n        tabFocus -= 1;\n        if (tabFocus < 0) tabFocus = tabs.length - 1;\n      }\n      tabs[tabFocus].setAttribute('tabindex', 0);\n      tabs[tabFocus].focus();\n    }\n  });\n});}","id":0},{"code":"({tabs}) => {tabs.forEach(tab => {\n  tab.addEventListener('click', changeTabs);\n});}","id":1}]}